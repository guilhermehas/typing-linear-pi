open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; subst; cong; trans)
open Relation.Binary.PropositionalEquality.‚â°-Reasoning
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Decidable using (fromWitness)

import Data.Product as Product
import Data.Product.Properties as Product‚Çö
import Data.Unit as Unit
import Data.Nat as ‚Ñï
import Data.Vec as Vec
import Data.Fin as Fin
import Data.Vec.Relation.Unary.All as All

open Unit using (‚ä§; tt)
open ‚Ñï using (‚Ñï; zero; suc)
open Vec using (Vec; []; _‚à∑_)
open All using (All; []; _‚à∑_)
open Fin using (Fin ; zero ; suc)
open Product using (Œ£-syntax; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)

open import PiCalculus.Syntax
open Scoped
open Syntax
open import PiCalculus.Semantics
open import PiCalculus.Semantics.Properties
open import PiCalculus.LinearTypeSystem.Quantifiers


module PiCalculus.LinearTypeSystem.SubjectCongruence (Œ© : Quantifiers) where
open Quantifiers Œ©
open import PiCalculus.LinearTypeSystem Œ©
open import PiCalculus.LinearTypeSystem.ContextLemmas Œ©
open import PiCalculus.LinearTypeSystem.Framing Œ©
open import PiCalculus.LinearTypeSystem.Weakening Œ©
open import PiCalculus.LinearTypeSystem.Strengthening Œ©
open import PiCalculus.LinearTypeSystem.Swapping Œ©

SubjectCongruence : Set
SubjectCongruence = {n : ‚Ñï} {Œ≥ : PreCtx n} {idxs : Idxs n} {Œì Œî : Ctx idxs}
                  ‚Üí {r : RecTree} {P Q : Scoped n}
                  ‚Üí P ‚âÖ‚ü® r ‚ü© Q
                  ‚Üí Œ≥ ‚àù Œì ‚ä¢ P ‚ä† Œî
                  ‚Üí Œ≥ ‚àù Œì ‚ä¢ Q ‚ä† Œî

private
  variable
    n : ‚Ñï
    P Q : Scoped n

comp-comm : {Œ≥ : PreCtx n} {idxs : Idxs n} {Œì Œû : Ctx idxs}
          ‚Üí Œ≥ ‚àù Œì ‚ä¢ P ‚à• Q ‚ä† Œû
          ‚Üí Œ≥ ‚àù Œì ‚ä¢ Q ‚à• P ‚ä† Œû
comp-comm (comp ‚ä¢P ‚ä¢Q) with ‚ä¢-‚äé ‚ä¢P | ‚ä¢-‚äé ‚ä¢Q
comp-comm (comp ‚ä¢P ‚ä¢Q) | _ , P‚âî | _ , Q‚âî =
  let _ , (Q'‚âî , P'‚âî) = ‚äé-assoc (‚äé-comm P‚âî) Q‚âî in
  comp (‚ä¢-frame Q‚âî Q'‚âî ‚ä¢Q) (‚ä¢-frame P‚âî (‚äé-comm P'‚âî) ‚ä¢P)

subject-cong : SubjectCongruence
subject-cong (stop comp-assoc) (comp ‚ä¢P (comp ‚ä¢Q ‚ä¢R)) = comp (comp ‚ä¢P ‚ä¢Q) ‚ä¢R
subject-cong (stop comp-symm) (comp ‚ä¢P ‚ä¢Q) = comp-comm (comp ‚ä¢P ‚ä¢Q)
subject-cong (stop comp-end) (comp ‚ä¢P end) = ‚ä¢P
subject-cong (stop scope-end) (chan t c ._ end) = end
subject-cong (stop (scope-ext u)) (chan t c Œº (comp {Œî = _ -, _} ‚ä¢P ‚ä¢Q)) rewrite sym (‚ä¢-unused _ u ‚ä¢P) = comp (‚ä¢-strengthen zero u ‚ä¢P) (chan t c Œº ‚ä¢Q)
subject-cong (stop scope-scope-comm) (chan t c Œº (chan t‚ÇÅ c‚ÇÅ Œº‚ÇÅ ‚ä¢P)) = chan t‚ÇÅ c‚ÇÅ Œº‚ÇÅ (chan t c Œº (‚ä¢-swap zero ‚ä¢P))
subject-cong (cong-symm (stop comp-assoc)) (comp (comp ‚ä¢P ‚ä¢Q) ‚ä¢R) = comp ‚ä¢P (comp ‚ä¢Q ‚ä¢R)
subject-cong (cong-symm (stop comp-symm)) (comp ‚ä¢P ‚ä¢Q) = comp-comm (comp ‚ä¢P ‚ä¢Q)
subject-cong (cong-symm (stop comp-end)) ‚ä¢P = comp ‚ä¢P end
subject-cong (cong-symm (stop scope-end)) end = chan {idx' = ‚àÉIdx} {idx = ‚àÉIdx} ùüô (0‚àô , 0‚àô) 0‚àô end
subject-cong (cong-symm (stop (scope-ext u))) (comp ‚ä¢P (chan t c Œº ‚ä¢Q)) = chan t c Œº (comp (subst (Œª ‚óè ‚Üí _ ‚àù _ ‚ä¢ ‚óè ‚ä† _) (lift-lower zero _ u) (‚ä¢-weaken zero ‚ä¢P)) ‚ä¢Q)
subject-cong (cong-symm (stop scope-scope-comm)) (chan t c Œº (chan t‚ÇÅ c‚ÇÅ Œº‚ÇÅ ‚ä¢P)) = chan _ _ _ (chan _ _ _ (subst (Œª ‚óè ‚Üí _ ‚àù _ ‚ä¢ ‚óè ‚ä† _) (swap-swap zero _) (‚ä¢-swap zero ‚ä¢P)))

-- Equivalence and congruence
subject-cong cong-refl ‚ä¢P = ‚ä¢P
subject-cong (cong-trans P‚âÖQ Q‚âÖR) ‚ä¢P = subject-cong Q‚âÖR (subject-cong P‚âÖQ ‚ä¢P)
subject-cong (new-cong P‚âÖQ) (chan t m Œº ‚ä¢P) = chan t m Œº (subject-cong P‚âÖQ ‚ä¢P)
subject-cong (comp-cong P‚âÖQ) (comp ‚ä¢P ‚ä¢R) = comp (subject-cong P‚âÖQ ‚ä¢P) ‚ä¢R
subject-cong (input-cong P‚âÖQ) (recv x ‚ä¢P) = recv x (subject-cong P‚âÖQ ‚ä¢P)
subject-cong (output-cong P‚âÖQ) (send x y ‚ä¢P) = send x y (subject-cong P‚âÖQ ‚ä¢P)
subject-cong (cong-symm cong-refl) ‚ä¢P = ‚ä¢P
subject-cong (cong-symm (cong-symm P‚âÖQ)) ‚ä¢P = subject-cong P‚âÖQ ‚ä¢P
subject-cong (cong-symm cong-trans P‚âÖQ P‚âÖR) ‚ä¢P = subject-cong (cong-symm P‚âÖQ) (subject-cong (cong-symm P‚âÖR) ‚ä¢P)
subject-cong (cong-symm (new-cong P‚âÖQ)) (chan t m Œº ‚ä¢P) = chan t m Œº (subject-cong (cong-symm P‚âÖQ) ‚ä¢P)
subject-cong (cong-symm (comp-cong P‚âÖQ)) (comp ‚ä¢P ‚ä¢R) = comp (subject-cong (cong-symm P‚âÖQ) ‚ä¢P) ‚ä¢R
subject-cong (cong-symm (input-cong P‚âÖQ)) (recv x ‚ä¢P) = recv x (subject-cong (cong-symm P‚âÖQ) ‚ä¢P)
subject-cong (cong-symm (output-cong P‚âÖQ)) (send x y ‚ä¢P) = send x y (subject-cong (cong-symm P‚âÖQ) ‚ä¢P)
