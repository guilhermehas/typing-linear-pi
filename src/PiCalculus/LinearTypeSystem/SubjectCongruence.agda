{-# OPTIONS --safe #-} -- --without-K #-}

open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; subst; cong; trans)
open Relation.Binary.PropositionalEquality.‚â°-Reasoning
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Decidable using (fromWitness)

import Data.Product as Product
import Data.Product.Properties as Product‚Çö
import Data.Unit as Unit
import Data.Nat as ‚Ñï
import Data.Vec as Vec
import Data.Fin as Fin
import Data.Vec.Relation.Unary.All as All

open Unit using (‚ä§; tt)
open ‚Ñï using (‚Ñï; zero; suc)
open Vec using (Vec; []; _‚à∑_)
open All using (All; []; _‚à∑_)
open Fin using (Fin ; zero ; suc)
open Product using (Œ£-syntax; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)

open import PiCalculus.Syntax
open Scoped
open import PiCalculus.Semantics
open import PiCalculus.Semantics.Properties
open import PiCalculus.LinearTypeSystem.Algebras


module PiCalculus.LinearTypeSystem.SubjectCongruence (Œ© : Algebras) where
open Algebras Œ©
open import PiCalculus.LinearTypeSystem Œ©
open import PiCalculus.LinearTypeSystem.ContextLemmas Œ©
open import PiCalculus.LinearTypeSystem.Framing Œ©
{-
open import PiCalculus.LinearTypeSystem.Weakening Œ©
open import PiCalculus.LinearTypeSystem.Strengthening Œ©
open import PiCalculus.LinearTypeSystem.Exchange Œ©
-}

SubjectCongruence : Set
SubjectCongruence = {n : ‚Ñï} {Œ≥ : PreCtx n} {idxs : Idxs n} {Œì Œî : Ctx idxs}
                  ‚Üí {r : RecTree} {P Q : Scoped n}
                  ‚Üí P ‚âÖ‚ü® r ‚ü© Q
                  ‚Üí Œ≥ Ôºõ Œì ‚ä¢ P ‚ñπ Œî
                  ‚Üí Œ≥ Ôºõ Œì ‚ä¢ Q ‚ñπ Œî

private
  variable
    n : ‚Ñï
    P Q : Scoped n

comp-comm : {Œ≥ : PreCtx n} {idxs : Idxs n} {Œì Œû : Ctx idxs}
          ‚Üí Œ≥ Ôºõ Œì ‚ä¢ P ‚à• Q ‚ñπ Œû
          ‚Üí Œ≥ Ôºõ Œì ‚ä¢ Q ‚à• P ‚ñπ Œû
comp-comm (‚ä¢P ‚à• ‚ä¢Q) with ‚ä¢-‚äó ‚ä¢P | ‚ä¢-‚äó ‚ä¢Q
comp-comm (‚ä¢P ‚à• ‚ä¢Q) | _ , P‚âî | _ , Q‚âî =
  let _ , (Q'‚âî , P'‚âî) = ‚äó-assoc (‚äó-comm P‚âî) Q‚âî in
  ‚ä¢-frame Q‚âî Q'‚âî ‚ä¢Q ‚à• ‚ä¢-frame P‚âî (‚äó-comm P'‚âî) ‚ä¢P

subject-cong : SubjectCongruence
subject-cong (stop comp-assoc) (‚ä¢P ‚à• (‚ä¢Q ‚à• ‚ä¢R)) = (‚ä¢P ‚à• ‚ä¢Q) ‚à• ‚ä¢R
subject-cong (stop comp-symm) (‚ä¢P ‚à• ‚ä¢Q) = comp-comm (‚ä¢P ‚à• ‚ä¢Q)
subject-cong (stop comp-end) (‚ä¢P ‚à• ùüò) = ‚ä¢P
subject-cong (stop scope-end) (ŒΩ ts Œº ùüò) = ùüò
subject-cong (stop (scope-ext u)) (ŒΩ ts Œº (_‚à•_ {Œî = _ -, _} ‚ä¢P ‚ä¢Q)) rewrite sym {!‚ä¢-unused _ u ‚ä¢P!} = {!‚ä¢-strengthen zero u ‚ä¢P!} ‚à• ŒΩ ts Œº {!‚ä¢Q!}
subject-cong (stop scope-scope-comm) (ŒΩ ts Œº (ŒΩ ts' Œº' ‚ä¢P)) = ŒΩ ts' Œº' (ŒΩ ts Œº {!‚ä¢-exchange zero ‚ä¢P!})
subject-cong (cong-symm (stop comp-assoc)) ((‚ä¢P ‚à• ‚ä¢Q) ‚à• ‚ä¢R) = ‚ä¢P ‚à• (‚ä¢Q ‚à• ‚ä¢R)
subject-cong (cong-symm (stop comp-symm)) (‚ä¢P ‚à• ‚ä¢Q) = comp-comm (‚ä¢P ‚à• ‚ä¢Q)
subject-cong (cong-symm (stop comp-end)) ‚ä¢P = ‚ä¢P ‚à• ùüò
subject-cong (cong-symm (stop scope-end)) ùüò = ŒΩ ((C[ [] ] , ‚àÉIdx , ‚Ñì#) ‚à∑ []) {‚àÉIdx} 0‚àô ùüò
subject-cong (cong-symm (stop (scope-ext u))) (‚ä¢P ‚à• (ŒΩ ts Œº ‚ä¢Q)) = ŒΩ ts Œº ((subst (Œª ‚óè ‚Üí _ Ôºõ _ ‚ä¢ ‚óè ‚ñπ _) (punchIn‚àòpunchOut (right +-identity ≥) _ u) {!‚ä¢-weaken zero ‚ä¢P!}) ‚à• ‚ä¢Q)
subject-cong (cong-symm (stop scope-scope-comm)) (ŒΩ ts' Œº' (ŒΩ ts Œº ‚ä¢P)) = ŒΩ ts Œº (ŒΩ ts' Œº' (subst (Œª ‚óè ‚Üí _ Ôºõ _ ‚ä¢ ‚óè ‚ñπ _) (exchange-involutive (right (right +-identity ≥)) _) {!‚ä¢-exchange zero ‚ä¢P!}))

-- Equivalence and congruence
subject-cong cong-refl ‚ä¢P = ‚ä¢P
subject-cong (cong-trans P‚âÖQ Q‚âÖR) ‚ä¢P = subject-cong Q‚âÖR (subject-cong P‚âÖQ ‚ä¢P)
subject-cong (ŒΩ-cong P‚âÖQ) (ŒΩ ts Œº ‚ä¢P) = ŒΩ ts Œº (subject-cong P‚âÖQ ‚ä¢P)
subject-cong (comp-cong P‚âÖQ) (‚ä¢P ‚à• ‚ä¢R) = subject-cong P‚âÖQ ‚ä¢P ‚à• ‚ä¢R
subject-cong (input-cong P‚âÖQ) (x ‚¶Ö‚¶Ü ‚ä¢P) = x ‚¶Ö‚¶Ü subject-cong P‚âÖQ ‚ä¢P
subject-cong (output-cong P‚âÖQ) (x ‚ü® y ‚ü© ‚ä¢P) = x ‚ü® y ‚ü© subject-cong P‚âÖQ ‚ä¢P
subject-cong (cong-symm cong-refl) ‚ä¢P = ‚ä¢P
subject-cong (cong-symm (cong-symm P‚âÖQ)) ‚ä¢P = subject-cong P‚âÖQ ‚ä¢P
subject-cong (cong-symm cong-trans P‚âÖQ P‚âÖR) ‚ä¢P = subject-cong (cong-symm P‚âÖQ) (subject-cong (cong-symm P‚âÖR) ‚ä¢P)
subject-cong (cong-symm (ŒΩ-cong P‚âÖQ)) (ŒΩ ts Œº ‚ä¢P) = ŒΩ ts Œº (subject-cong (cong-symm P‚âÖQ) ‚ä¢P)
subject-cong (cong-symm (comp-cong P‚âÖQ)) (‚ä¢P ‚à• ‚ä¢R) = subject-cong (cong-symm P‚âÖQ) ‚ä¢P ‚à• ‚ä¢R
subject-cong (cong-symm (input-cong P‚âÖQ)) (x ‚¶Ö‚¶Ü ‚ä¢P) = x ‚¶Ö‚¶Ü subject-cong (cong-symm P‚âÖQ) ‚ä¢P
subject-cong (cong-symm (output-cong P‚âÖQ)) (x ‚ü® y ‚ü© ‚ä¢P) = x ‚ü® y ‚ü© subject-cong (cong-symm P‚âÖQ) ‚ä¢P
